

.. _sphx_glr_auto_examples_plot_filter.py:


Filtering
=========

Plot filter properties.



.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt
    import os.path as op

    import mne

    from library.config import study_path

    filt_params = dict(l_trans_bandwidth='auto', h_trans_bandwidth='auto',
                       filter_length='auto', phase='zero', fir_window='hann')







Let's look at some data from the multimodal faces data set.
First we read in the data from run 1 of subject 2.



.. code-block:: python

    raw = mne.io.read_raw_fif(op.join(study_path, 'ds117', 'sub002', 'MEG',
                                      'run_01_sss.fif'), add_eeg_ref=False)

    raw.set_channel_types({'EEG061': 'eog', 'EEG062': 'eog', 'EEG063': 'ecg',
                           'EEG064': 'misc'})  # EEG064 free floating el.
    raw.rename_channels({'EEG061': 'EOG061', 'EEG062': 'EOG062',
                         'EEG063': 'ECG063'})
    raw.set_eeg_reference()





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /tsi/doctorants/data_gramfort/dgw_faces/ds117/sub002/MEG/run_01_sss.fif...
    This filename (/tsi/doctorants/data_gramfort/dgw_faces/ds117/sub002/MEG/run_01_sss.fif) does not conform to MNE naming conventions. All raw files should end with raw.fif, raw_sss.fif, raw_tsss.fif, raw.fif.gz, raw_sss.fif.gz or raw_tsss.fif.gz
        Range : 248600 ... 788699 =    226.000 ...   716.999 secs
    Ready.
    Current compensation grade : 0
    Adding average EEG reference projection.
    1 projection items deactivated


Then we filter it at 1Hz with the defaults of MNE.



.. code-block:: python

    raw_1 = raw.copy()
    raw_1.load_data()
    raw_1.filter(1, 40, **filt_params)

    raw_1.plot_psd(fmax=10)




.. image:: /auto_examples/images/sphx_glr_plot_filter_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Reading 0 ... 540099  =      0.000 ...   490.999 secs...
    Band-pass filtering from 1 - 40 Hz
    l_trans_bandwidth chosen to be 1.0 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 6820 samples (6.200 sec) selected
    Effective window size : 1.862 (s)
    Effective window size : 1.862 (s)
    Effective window size : 1.862 (s)


We see that even though the attenuation close to 0Hz is sufficient enough,
the low frequency components at around 1Hz are still quite prominent. Lets
see how the famous faces look after averaging. (Notice that we do not
compensate for the delay or clean the data, so the figures are not comparable
to the final results).



.. code-block:: python

    events = mne.find_events(raw_1)
    event_ids = [5, 6, 7]  # Famous faces
    evoked_1 = mne.Epochs(raw_1, events, event_id=event_ids,
                          baseline=None).average()
    evoked_1.plot(spatial_colors=True)




.. image:: /auto_examples/images/sphx_glr_plot_filter_002.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    259 events found
    Events id: [   5    6    7   13   14   15   17   18   19  256  261  262  263  269  270
      271  273  274  275 4096 4101 4102 4103 4109 4110 4111 4113 4114 4115 4352]
    49 matching events found
    No baseline correction applied
    add_eeg_ref defaults to True in 0.13, will default to False in 0.14, and will be removed in 0.15. We recommend to use add_eeg_ref=False and set_eeg_reference() instead.
    Created an SSP operator (subspace dimension = 1)
    1 projection items activated


They're all over the place! The baselining effect of high-pass filtering does
not seem to work. Let's try removing the low frequency components by raising
the cut-off frequency to 2.5 Hz.



.. code-block:: python

    raw_2 = raw.copy()
    raw_2.load_data()
    raw_2.filter(2.5, 40, **filt_params)
    raw_2.plot_psd(fmax=10)




.. image:: /auto_examples/images/sphx_glr_plot_filter_003.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Reading 0 ... 540099  =      0.000 ...   490.999 secs...
    Band-pass filtering from 2.5 - 40 Hz
    l_trans_bandwidth chosen to be 2.0 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 3410 samples (3.100 sec) selected
    Effective window size : 1.862 (s)
    Effective window size : 1.862 (s)
    Effective window size : 1.862 (s)


We see that the low frequency 'peak' is gone and the transition is more
gradual. The 'auto' param automatically fits the transition bandwidth to
reduce ringing as much as possible.
Finally we plot the evoked responses, and we see that the fanning of the
signal is gone.



.. code-block:: python

    evoked_2 = mne.Epochs(raw_2, events, event_id=event_ids,
                          baseline=None).average()
    evoked_2.plot(spatial_colors=True)




.. image:: /auto_examples/images/sphx_glr_plot_filter_004.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    49 matching events found
    No baseline correction applied
    add_eeg_ref defaults to True in 0.13, will default to False in 0.14, and will be removed in 0.15. We recommend to use add_eeg_ref=False and set_eeg_reference() instead.
    Created an SSP operator (subspace dimension = 1)
    1 projection items activated


Let's also plot the impulse response of the used filter. Here we create some
data with 30000 samples of zeros with an impulse at the middle. Then we
construct a raw data structure and set a sampling frequency to 1000. Thus,
we have 30 seconds of data with an impulse at 15 seconds.



.. code-block:: python

    n_samples = 30000
    sfreq = 1000
    info = mne.create_info(ch_names=['test'], sfreq=sfreq, ch_types=['eeg'])
    data = np.zeros(n_samples)
    data[n_samples // 2] = 1e-6
    times = np.linspace(0, n_samples // sfreq, n_samples)
    raw = mne.io.RawArray(np.array([data]), info)





.. rst-class:: sphx-glr-script-out

 Out::

    Creating RawArray with float64 data, n_channels=1, n_times=30000
        Range : 0 ... 29999 =      0.000 ...    29.999 secs
    Ready.


We low-pass filter the data and plot the frequency spectrum and the impulse
response of the filter.



.. code-block:: python

    raw_1 = raw.copy()
    raw_1.filter(None, 40, **filt_params)
    plt.plot(times, raw_1[0][0][0])
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.title('Impulse response')
    plt.xlim((14, 16))
    plt.show()
    raw_1.plot_psd(fmin=20, fmax=60)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_005.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_006.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Low-pass filtering at 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 620 samples (0.620 sec) selected
    Effective window size : 2.048 (s)


Let's do the same after high-pass filtering at 2.5 Hz.



.. code-block:: python

    raw_1.filter(2.5, None, **filt_params)
    plt.plot(times, raw_1[0][0][0])
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.title('Impulse response')
    plt.xlim((14, 16))
    plt.show()
    raw_1.plot_psd(fmax=10)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_007.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_008.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    High-pass filtering at 2.5 Hz
    l_trans_bandwidth chosen to be 2.0 Hz
    Filter length of 3100 samples (3.100 sec) selected
    Effective window size : 2.048 (s)


We see that with the old defaults (MNE versions < 0.13) the transition is
much steeper.



.. code-block:: python

    raw.filter(2.5, 40, l_trans_bandwidth=0.5)
    plt.plot(times, raw[0][0][0])
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.title('Impulse response')
    plt.xlim((14, 16))
    plt.show()
    raw.plot_psd(fmax=10)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_009.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_filter_010.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Band-pass filtering from 2.5 - 40 Hz
    Multiple deprecated filter parameters were used:
    phase in 0.13 is "zero-double" but will change to "zero" in 0.14
    fir_window in 0.13 is "hann" but will change to "hamming" in 0.14
    upper transition bandwidth in 0.13 is 0.5 Hz but will change to "auto" in 0.14
    The default filter length in 0.13 is "10s" but will change to "auto" in 0.14
    Effective window size : 2.048 (s)


**Total running time of the script:**
(0 minutes 44.051 seconds)



.. container:: sphx-glr-download

    :download:`Download Python source code: plot_filter.py <plot_filter.py>`


.. container:: sphx-glr-download

    :download:`Download IPython notebook: plot_filter.ipynb <plot_filter.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
