

.. _sphx_glr_auto_examples_demos_plot_psd.py:


=========================
PSD (linear vs log scale)
=========================

The Power Spectral Density (PSD) plot shows different information for
linear vs. log scale. We will demonstrate here how the PSD plot can be
used to conveniently spot bad sensors.



.. code-block:: python

    import os
    import os.path as op
    import sys

    import matplotlib.pyplot as plt

    import mne

    sys.path.append(op.join('..', '..', 'processing'))
    from library.config import (study_path, map_subjects,
                                set_matplotlib_defaults)  # noqa: E402







First some basic configuration as in all scripts



.. code-block:: python


    subjects_dir = os.path.join(study_path, 'subjects')

    subject_id = 10
    run = 2
    subject = "sub%03d" % int(subject_id)

    fname = op.join(study_path, 'ds117', subject, 'MEG', 'run_%02d_raw.fif' % run)
    raw = mne.io.read_raw_fif(fname, preload=True)







Next, we get the list of bad channels



.. code-block:: python

    mapping = map_subjects[subject_id]
    bads = list()
    bad_name = op.join('..', '..', 'processing', 'bads', mapping,
                       'run_%02d_raw_tr.fif_bad' % run)
    with open(bad_name) as f:
        for line in f:
            bads.append(line.strip())







and set the EOG/ECG channels appropriately



.. code-block:: python


    raw.set_channel_types({'EEG061': 'eog',
                           'EEG062': 'eog',
                           'EEG063': 'ecg',
                           'EEG064': 'misc'})  # EEG064 free floating el.
    raw.rename_channels({'EEG061': 'EOG061',
                         'EEG062': 'EOG062',
                         'EEG063': 'ECG063'})

    raw.pick_types(eeg=True, meg=False)







MNE also displays the cutoff frequencies of the online filters, but here
we remove it from the info and show only the HPI coil frequencies.



.. code-block:: python


    raw.info['lowpass'] = None
    raw.info['highpass'] = None
    raw.info['line_freq'] = None







The line colors for the bad channels will be red.



.. code-block:: python


    colors = ['k'] * raw.info['nchan']
    for b in bads:
        colors[raw.info['ch_names'].index(b)] = 'r'

    # this channel should have been marked bad (subject=14, run=01)
    # colors[raw.info['ch_names'].index('EEG024')] = 'g'







First we show the log scale to spot bad sensors.



.. code-block:: python


    fig, axes = plt.subplots(1, 2, figsize=(7, 2.25))
    set_matplotlib_defaults()
    ax = axes[0]
    raw.plot_psd(
        average=False, line_alpha=0.6, fmin=0, fmax=350, xscale='log',
        spatial_colors=False, show=False, ax=[ax])
    ax.set(xlabel='Frequency (Hz)', title='A')

    for l, c in zip(ax.get_lines(), colors):
        if c == 'r':
            l.set_color(c)
            l.set_zorder(3)
        else:
            l.set_zorder(4)

    # Next, the linear scale to check power line frequency

    ax = axes[1]
    raw.plot_psd(
        average=False, line_alpha=0.6, n_fft=2048, n_overlap=1024, fmin=0,
        fmax=350, xscale='linear', spatial_colors=False, show=False, ax=[ax])
    ax.set(xlabel='Frequency (Hz)', ylabel='', title='B')
    ax.axvline(50., linestyle='--', alpha=0.25, linewidth=2)
    ax.axvline(50., linestyle='--', alpha=0.25, linewidth=2)

    # HPI coils
    for freq in [293., 307., 314., 321., 328.]:
        ax.axvline(freq, linestyle='--', alpha=0.25, linewidth=2, zorder=2)

    fig.tight_layout()
    fig.savefig(op.join('..', 'figures', 'psd.pdf'), bbox_to_inches='tight')
    plt.show()



.. code-block:: pytb

    Traceback (most recent call last):
      File "/mnt/bakraid/larsoner/mne-biomag-group-demo/mne-biomag-group-demo/scripts/results/demos/plot_psd.py", line 108, in <module>
        fig.savefig(op.join('..', 'figures', 'psd.pdf'), bbox_to_inches='tight')
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/figure.py", line 1813, in savefig
        self.canvas.print_figure(fname, **kwargs)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backend_bases.py", line 2258, in print_figure
        **kwargs)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 2592, in print_pdf
        self.figure.draw(renderer)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 55, in draw_wrapper
        return draw(artist, renderer, *args, **kwargs)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/figure.py", line 1294, in draw
        renderer, self, artists, self.suppressComposite)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/image.py", line 138, in _draw_list_compositing_images
        a.draw(renderer)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 55, in draw_wrapper
        return draw(artist, renderer, *args, **kwargs)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/axes/_base.py", line 2401, in draw
        mimage._draw_list_compositing_images(renderer, self, artists)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/image.py", line 138, in _draw_list_compositing_images
        a.draw(renderer)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 55, in draw_wrapper
        return draw(artist, renderer, *args, **kwargs)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/text.py", line 803, in draw
        ismath=ismath, mtext=mtext)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 2148, in draw_text
        return draw_text_simple()
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 2078, in draw_text_simple
        self._setup_textpos(x, y, angle)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 1851, in _setup_textpos
        self.file.output(x - oldx, y - oldy, Op.textpos)
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 626, in output
        self.write(fill([pdfRepr(x) for x in data]))
      File "/home/larsoner/.local/lib/python2.7/site-packages/matplotlib-2.0.2+4858.gd02024e98-py2.7-linux-x86_64.egg/matplotlib/backends/backend_pdf.py", line 153, in pdfRepr
        raise ValueError("Can only output finite numbers in PDF")
    ValueError: Can only output finite numbers in PDF




**Total running time of the script:** ( 0 minutes  2.798 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_psd.py <plot_psd.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_psd.ipynb <plot_psd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
