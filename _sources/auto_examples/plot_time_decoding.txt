

.. _sphx_glr_auto_examples_plot_time_decoding.py:


=============
Time Decoding
=============

Time decoding fits a Logistic Regression model for every time point in the
epoch. In this example, we contrast the condition 'famous' against 'scrambled'
using this approach. The end result is an averaging effect across sensors.
The contrast across different sensors are combined into a single plot.



.. code-block:: python

    import os.path as op
    import mne
    import os






We analyze only one subject. Change ``meg_dir`` to point to your directory



.. code-block:: python


    subject_id = 1
    subject = "sub%03d" % subject_id
    user = os.environ['USER']
    if user == 'gramfort':
        study_path = '/tsi/doctorants/data_gramfort/dgw_faces'
        N_JOBS = 8
    elif user == 'jleppakangas' or user == 'mjas':
        study_path = '/tsi/doctorants/data_gramfort/dgw_faces'
        N_JOBS = 4
    else:
        study_path = op.join(op.dirname(__file__), '..', '..', '..')
    subjects_dir = os.path.join(study_path, 'subjects')
    meg_dir = os.path.join(study_path, 'MEG')
    data_path = op.join(meg_dir, subject)
    epochs = mne.read_epochs(op.join(data_path, '%s-epo.fif' % subject))





.. rst-class:: sphx-glr-script-out

 Out::

    Reading /tsi/doctorants/data_gramfort/dgw_faces/MEG/sub001/sub001-epo.fif ...
        Read a total of 1 projection items:
            Average EEG reference (1 x 70) active
        Found the data of interest:
            t =    -200.00 ...     800.00 ms (None)
            0 CTF compensation matrices available
    778 matching events found
    No baseline correction applied
    Created an SSP operator (subspace dimension = 1)
    778 matching events found
    No baseline correction applied
    Created an SSP operator (subspace dimension = 1)
    1 projection items activated


We define the labels for the epochs by pooling together all 'famous'
and all 'scrambled' epochs



.. code-block:: python

    import numpy as np

    n_famous, n_unfamiliar = len(epochs['face/famous']), len(epochs['scrambled'])
    y = np.r_[np.ones((n_famous, )), np.zeros((n_unfamiliar, ))]
    epochs = mne.concatenate_epochs([epochs['face/famous'], epochs['scrambled']])




.. rst-class:: sphx-glr-script-out

 Out::

    525 matching events found
    No baseline correction applied
    Created an SSP operator (subspace dimension = 1)
    0 bad epochs dropped


Let us restrict ourselves to the occipital channels



.. code-block:: python

    from mne.selection import read_selection
    ch_names = [ch_name.replace(' ', '') for ch_name
                in read_selection('occipital')]
    epochs.pick_channels(ch_names)







Now we fit and plot the time decoder



.. code-block:: python

    from mne.decoding import TimeDecoding

    times = dict(step=0.005) # fit a classifier only ever 5 ms
    td = TimeDecoding(predict_mode='cross-validation', times=times)
    td.fit(epochs, y)
    td.score(epochs)
    td.plot(title="Time decoding (famous vs. scrambled)")



.. image:: /auto_examples/images/sphx_glr_plot_time_decoding_001.png
    :align: center




**Total running time of the script:**
(0 minutes 21.750 seconds)



.. container:: sphx-glr-download

    :download:`Download Python source code: plot_time_decoding.py <plot_time_decoding.py>`


.. container:: sphx-glr-download

    :download:`Download IPython notebook: plot_time_decoding.ipynb <plot_time_decoding.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
